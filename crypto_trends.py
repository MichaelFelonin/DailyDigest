# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nHrQVjg1f-I1UlGKlSoDwdiAeBgp6fNN
"""

# --- STEP 1: Install dependencies ---
!pip install pytrends pandas requests

# --- STEP 2: Imports ---
import pandas as pd
import numpy as np
from pytrends.request import TrendReq
import requests
import time

# --- STEP 3: Get top 100 coins from CoinGecko ---
def get_top_coins(limit=100):
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": limit, "page": 1}
    r = requests.get(url, params=params)
    data = r.json()
    return [coin["name"] for coin in data]

top_coins = get_top_coins(100)
print("Tracking top 100 coins:\n", top_coins[:10], "...")

# --- STEP 4: Setup Google Trends ---
pytrends = TrendReq(hl="en-US", tz=360)

def get_trend_metrics(keyword):
    """Fetch last 7 days hourly Google Trends data and return latest metrics"""
    try:
        pytrends.build_payload([keyword], timeframe="now 7-d")
        df = pytrends.interest_over_time()
        if df.empty:
            return None
        series = df[keyword]
        mean, std = series.mean(), series.std()
        if std == 0:
            return None
        z_score = (series.iloc[-1] - mean) / std
        latest_val = series.iloc[-1]
        return {"coin": keyword, "z_score": z_score, "latest": latest_val}
    except Exception:
        return None

# --- STEP 5: Collect metrics for top 100 coins ---
results = []
for coin in top_coins:
    metrics = get_trend_metrics(coin)
    if metrics:
        results.append(metrics)
    time.sleep(1)  # avoid Google blocking

df = pd.DataFrame(results)

# --- STEP 6: Compute combined score (Spike √ó Absolute Level) ---
df["score"] = df["z_score"] * df["latest"]

# --- STEP 7: Sort and get top 5 ---
top5 = df.sort_values("score", ascending=False).head(5)

msg_text = "üö® Daily Crypto Google Trends Report üö®\n\nTop 5 Crypto Trend Leaders:\n\n"
for i, row in top5.iterrows():
    msg_text += f"{row['coin']}: score={row['score']:.2f} | z={row['z_score']:.2f} | latest={row['latest']}\n"

print(msg_text)

# --- STEP 8: Send to Telegram ---
BOT_TOKEN = "8298815367:AAG5L4YFXYvpA-LZ6li_pjw8yFHyR1FuI-g"   # from BotFather
CHAT_ID = "735460334"       # from getUpdates

def send_telegram_message(bot_token, chat_id, text):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        r = requests.post(url, data=payload)
        if r.status_code == 200:
            print("‚úÖ Telegram message sent!")
        else:
            print("‚ùå Failed to send:", r.text)
    except Exception as e:
        print("‚ùå Error:", e)

send_telegram_message(BOT_TOKEN, CHAT_ID, msg_text)